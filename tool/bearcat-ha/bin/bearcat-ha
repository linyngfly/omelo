#!/usr/bin/env node

let Logger = require('pomelo-logger');
let logger = Logger.getLogger('bearcat-ha', 'CommandLine');
let Cluster = require('../lib/watcher/watcherCluster');
let Version = require('../package.json').version;
let JSONC = require('json-comments');
let program = require('commander');
let fs = require('fs');

function loadConfig(filename) {
  let content = fs.readFileSync(filename, 'utf8');
  let config = JSONC.parse(content);

  if (!config.zooKeeper) {
    throw new Error('zooKeeper can not be empty!');
  }

  if (!config.nodes) {
    throw new Error('error: server nodes can not be empty!');
  }

  return config;
}

program
  .version(Version)
  .usage('-c config.json')
  .option('-c, --config [path]', 'Path to JSON config file')
  .parse(process.argv);


if (!program.config) {
  throw new Error('command error: No config file!');
}

let config = loadConfig(program.config);

let type = "ha";
if (config.type) {
  type = config.type;
}

let log4js = null;
let log4jsPath = 'log4js.json';

if (fs.existsSync(log4jsPath)) {
  log4js = fs.readFileSync(log4jsPath, 'utf8');
  log4js = JSONC.parse(log4js);
}

if (config.log) {
  // if log is a dir path
  let logfile = config.log;
  if (logfile.match(/\/$/)) {
    logfile = logfile + type + '-cluster-' + process.pid + '.log';
  }

  if (!log4js) {
    log4js = {
      appenders: [{
        type: 'console'
      }, {
        type: 'file',
        filename: logfile,
        maxLogSize: 300 * 1024 * 1024,
        backups: 1
      }],
      replaceConsole: true,
      lineDebug: true
    };
  }

  Logger.configure(log4js);
}

// logger.info('start options: ', config);
Cluster.setup(config);